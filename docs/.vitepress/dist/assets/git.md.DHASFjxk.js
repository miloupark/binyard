import{_ as i,c as a,ag as e,o as t}from"./chunks/framework.CJ72e6E2.js";const k=JSON.parse('{"title":"Git","description":"","frontmatter":{},"headers":[],"relativePath":"git.md","filePath":"git.md"}'),l={name:"git.md"};function n(h,s,d,p,o,c){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="git" tabindex="-1">Git <a class="header-anchor" href="#git" aria-label="Permalink to &quot;Git&quot;">​</a></h1><p>무지로부터 오는 불안을 아십니까, 그렇다면 공부하면 되지 않겠습니까? 예..<br> 처음으로 깃랩에 올려서 작업할 일이 생겼다! 앞자리에 아는 것을 설명하는 능력이 좋은 갓프롱트 개발자 분을 괴롭혀 많이 알아내는 중이다.</p><h2 id="커밋" tabindex="-1">커밋 <a class="header-anchor" href="#커밋" aria-label="Permalink to &quot;커밋&quot;">​</a></h2><ul><li>모든 파일 커밋하기<br> 모든 변경 사항을 스테이징하고 커밋</li></ul><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ git add .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ git commit -m &quot;message&quot;</span></span></code></pre></div><br><ul><li>특정 파일만 선택하여 커밋하기 <br> 변경된 파일 목록을 확인하고 특정 파일만 선택하여 커밋</li></ul><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 작업한 내역 확인</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ git status </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 특정 파일 스테이징</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ git add 파일경로/복붙</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 커밋 메세지</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ git commit -m &quot;message&quot;</span></span></code></pre></div><br><ul><li>방금 한 커밋 취소하기<br> 마지막 커밋을 취소하고 변경 사항을 스테이징 이전 상태로 되돌림</li></ul><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ git reset HEAD^</span></span></code></pre></div><br><ul><li>방금 한 커밋 취소 (스테이징 유지) <br> 이전 커밋을 취소하지만, 변경 사항을 스테이징 상태로 유지</li></ul><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ git reset --soft HEAD^</span></span></code></pre></div><p>-수정한 파일이 많은데, 2개만 커밋하게되면 <code>$ git reset HEAD^</code>하면 다시 100개 중 2개를 찾아야 하는 귀찮음 방지. <code>--soft</code>를 붙이면 커밋만 취소되고, 변경 내용은 유지됨</p><h2 id="내-브랜치에-최신-변경사항-반영하기" tabindex="-1">내 브랜치에 최신 변경사항 반영하기 <a class="header-anchor" href="#내-브랜치에-최신-변경사항-반영하기" aria-label="Permalink to &quot;내 브랜치에 최신 변경사항 반영하기&quot;">​</a></h2><h3 id="💡-상황-정리" tabindex="-1">💡 상황 정리 <a class="header-anchor" href="#💡-상황-정리" aria-label="Permalink to &quot;💡 상황 정리&quot;">​</a></h3><ul><li>로컬 <code>dev</code>브랜치는 최신 상태</li><li>이후 <code>dev</code>에 추가 작업 발생</li><li>내 브랜치에 <code>dev</code>의 추가 작업을 반영해야함</li><li>아직 내 브랜치에서는 작업하던 코드는 없음</li></ul><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 내 브랜치로 이동</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ git checkout 내 브랜치</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 최신 dev 브랜치 병합</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ git merge dev</span></span></code></pre></div><h2 id="dev가-최신-상태가-아닐수도-있다면" tabindex="-1">dev가 최신 상태가 아닐수도 있다면? <a class="header-anchor" href="#dev가-최신-상태가-아닐수도-있다면" aria-label="Permalink to &quot;dev가 최신 상태가 아닐수도 있다면?&quot;">​</a></h2><ul><li>로컬 <code>dev</code>가 원격 <code>dev</code>보다 뒤쳐져 있을 가능성이 있으므로, 최신 <code>dev</code>를 가져오고 병합하는 것이 좋음</li></ul><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># dev 브랜치로 이동</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 최신 dev 가져오기 (원격)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git pull origin dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 다시 내 브랜치로 이동</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout 내브랜치</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 최신 dev 병합</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git merge dev</span></span></code></pre></div><h2 id="merge-or-rebase로-내-브랜치-작업-반영하기" tabindex="-1">Merge or Rebase로 내 브랜치 작업 반영하기 <a class="header-anchor" href="#merge-or-rebase로-내-브랜치-작업-반영하기" aria-label="Permalink to &quot;Merge or Rebase로 내 브랜치 작업 반영하기&quot;">​</a></h2><h3 id="💡-상황-정리-1" tabindex="-1">💡 상황 정리 <a class="header-anchor" href="#💡-상황-정리-1" aria-label="Permalink to &quot;💡 상황 정리&quot;">​</a></h3><ul><li>로컬 <code>dev</code>가 최신 상태에서 내 브랜치 생성</li><li>내 브랜치에서 작업 진행</li><li>나중에 추가된 <code>dev</code> 변경 사항을 내 브랜치에 반영해야되는 상황</li></ul><h4 id="merge" tabindex="-1">Merge <a class="header-anchor" href="#merge" aria-label="Permalink to &quot;Merge&quot;">​</a></h4><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 내 브랜치로 이동</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ git checkout 내브랜치</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ git merge dev</span></span></code></pre></div><ul><li>히스토리 유지</li></ul><h4 id="rebase" tabindex="-1">Rebase <a class="header-anchor" href="#rebase" aria-label="Permalink to &quot;Rebase&quot;">​</a></h4><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 내 브랜치로 이동</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ git checkout 내브랜치</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ git rebase dev</span></span></code></pre></div>`,30)]))}const g=i(l,[["render",n]]);export{k as __pageData,g as default};
